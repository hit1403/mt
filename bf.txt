#include<windows.h>
#ifdef __APPLE__
#include <GLUT/glut.h>
#else
#include <GL/glut.h>
#endif

#include <stdlib.h>

/* GLUT callback Handlers */

struct point
{
    int x;
    int y;
} pt[100];
int i;
int flag= 0;

static void display(void)
{
    //glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    glColor3d(1,0,0);
    glBegin(GL_LINE_STRIP);
        for(int j=0;j<i;j++)
        {
            glVertex2f(pt[j].x,pt[j].y);
        }
        glVertex2f(pt[0].x,pt[0].y);
    glEnd();
    glFlush();

}

void boundary_fill(int x, int y, float fillColor[3], float borderColor[3])
{
    float interiorColor[3];
    glReadPixels(x, y, 1, 1, GL_RGB, GL_FLOAT, interiorColor);
    if (
        (interiorColor[0] != borderColor[0] || interiorColor[1] != borderColor[1] || interiorColor[2] != borderColor[2]) &&
        (interiorColor[0] != fillColor[0] || interiorColor[1] != fillColor[1] || interiorColor[2] != fillColor[2])
    )
    {
        glColor3fv(fillColor);
        glBegin(GL_POINTS);
            glVertex2i(x, y);
        glEnd();
        glFlush();
        boundary_fill(x + 1, y, fillColor, borderColor);
        boundary_fill(x - 1, y, fillColor, borderColor);
        boundary_fill(x, y + 1, fillColor, borderColor);
        boundary_fill(x, y - 1, fillColor, borderColor);


    }
}

void Mouse_hand(int button, int state, int x, int y)
{
    if (button == GLUT_LEFT_BUTTON && state == GLUT_DOWN)
    {
        if (flag == 0)
        {
            pt[i].x = x;
            pt[i].y = 480 - y;
            i += 1;
        }
        else if (flag == 1)
        {
            float fillColor[] = {0, 1, 1}; // Green color for filling
            float borderColor[] = {1, 0, 0}; // Red color for boundary
            boundary_fill(x, 480 - y, fillColor, borderColor);
        }
    }
    if (button == GLUT_RIGHT_BUTTON && state == GLUT_DOWN)
    {
        display();
        flag = 1;
    }
}

/* Program entry point */
void init()
{
    glClearColor(0, 0, 0, 0);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluOrtho2D(0, 640, 0, 480);
}

int main(int argc, char *argv[])
{
    glutInit(&argc, argv);
    glutInitWindowSize(640, 480);
    glutInitWindowPosition(10, 10);
    glutInitDisplayMode(GLUT_RGB | GLUT_SINGLE);

    glutCreateWindow("GLUT Shapes");

    glutDisplayFunc(display);
    //glutKeyboardFunc(key);

    init();
    glutMouseFunc(Mouse_hand);

    glutMainLoop();

    return 0;
}


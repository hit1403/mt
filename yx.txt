#include<windows.h>
#ifdef __APPLE__
#include <GLUT/glut.h>
#else
#include <GL/glut.h>
#endif

#include <stdlib.h>
#include<vector>
#include<bits/stdc++.h>
using namespace std;

struct point
{
    int x;
    int y;
} pts[100];
int i = 0;
int flag = 0;

static void display(void)
{
    glColor3d(0, 1, 0);
    glBegin(GL_LINE_LOOP);
    for (int j = 0; j < i; j++)
    {
        glVertex2f(pts[j].x, pts[j].y);
    }
    glEnd();
    glFlush();
}

void YX_scanlines()
{
    int minY = 0, maxY = 480;
    for (int y = minY; y <= maxY; y++)
    {
        vector<int> x_intersections; // Assuming max 100 intersections

        // Find intersections of the polygon edges with the current scanline
        for (int j = 0; j < i; j++)
        {
            int next = (j + 1) % i;
            if ((pts[j].y <= y && pts[next].y > y) || (pts[j].y > y && pts[next].y <= y))
            {
                // Compute x-coordinate of intersection
                float slope = (float)(pts[next].y - pts[j].y)/(pts[next].x - pts[j].x) ;
                int x_intersection = (int)(pts[j].x + (y - pts[j].y)/slope);
                x_intersections.push_back(x_intersection);
            }
        }
        sort(x_intersections.begin(),x_intersections.end());

        // Fill the scanline between pairs of intersection points
        for (int m = 0; m < x_intersections.size(); m += 2)
        {
            glBegin(GL_LINES);
            glVertex2f(x_intersections[m], y);
            glVertex2f(x_intersections[m + 1], y);
            glEnd();
        }
        glFlush();
    }
}

void Mouse_hand(int button, int state, int x, int y)
{
    if (button == GLUT_LEFT && state == GLUT_DOWN)
    {
        if (flag == 0)
        {
            pts[i].x = x;
            pts[i].y = 480 - y;
            i += 1;
        }
        else if (flag == 1)
        {
            YX_scanlines();
        }
    }
    if (button == GLUT_RIGHT_BUTTON && state == GLUT_DOWN)
    {
        display();
        flag = 1;
    }
}

/* Program entry point */
void init()
{
    glClearColor(1, 1, 1, 1);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluOrtho2D(0, 640, 0, 480);
}

int main(int argc, char *argv[])
{
    glutInit(&argc, argv);
    glutInitWindowSize(640, 480);
    glutInitWindowPosition(10, 10);
    glutInitDisplayMode(GLUT_RGB | GLUT_SINGLE);

    glutCreateWindow("GLUT Shapes");
    glutDisplayFunc(display);
    init();
    glutMouseFunc(Mouse_hand);

    glutMainLoop();

    return EXIT_SUCCESS;
}

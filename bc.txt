/*
 * GLUT Shapes Demo
 *
 * Written by Nigel Stewart November 2003
 *
 * This program is test harness for the sphere, cone
 * and torus shapes in GLUT.
 *
 * Spinning wireframe and smooth shaded shapes are
 * displayed until the ESC or q key is pressed.  The
 * number of geometry stacks and slices can be adjusted
 * using the + and - keys.
 */
#include<windows.h>
#ifdef __APPLE__
#include <GLUT/glut.h>
#else
#include <GL/glut.h>
#endif
#include <stdlib.h>
#include <math.h>

/* GLUT callback Handlers */
struct point
{
    int x;
    int y;
}pt[100];
int i=0;
static void display(void)
{


    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    glColor3d(1,0,0);




}

/*
static void key(unsigned char key, int x, int y)
{
    switch (key)
    {
        case 27 :
        case 'q':
            exit(0);
            break;

        case '+':
            slices++;
            stacks++;
            break;

        case '-':
            if (slices>3 && stacks>3)
            {
                slices--;
                stacks--;
            }
            break;
    }

    glutPostRedisplay();
}
*/
/*
static void idle(void)
{
    glutPostRedisplay();
}*/
void bezier_curve(struct point pt[],int ind)
{
    float t = 0;
    int x,y;
    glBegin(GL_POINTS);
    while(t<=1){
        x =  pow(1-t,3) * pt[ind].x + 3 * t * pow(1-t,2) * pt[ind+1].x + 3 * pow(t,2) * (1-t) * pt[ind+2].x + pow(t,3) * pt[ind+3].x;
        y = pow(1-t,3) * pt[ind].y + 3 * t * pow(1-t,2) * pt[ind+1].y + 3 * pow(t,2) * (1-t) * pt[ind+2].y + pow(t,3) * pt[ind+3].y;
        glVertex2f(x,y);
        t+=0.001;
    }
    glEnd();
    glFlush();

}
void Mouse_hand(int button, int state, int x, int y)
{
    if(button==GLUT_LEFT_BUTTON && state==GLUT_DOWN)
    {
        pt[i].x = x;
        pt[i].y = 480 - y;
        i+=1;
    }
    if(i%4==0)
    {
        bezier_curve(pt,i-4);

    }
}
/* Program entry point */
void init()
{

    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluOrtho2D(0,640,0,480);
    glClearColor(0,0,0,0);
}
int main(int argc, char *argv[])
{
    glutInit(&argc, argv);
    glutInitWindowSize(640,480);
    glutInitWindowPosition(10,10);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);

    glutCreateWindow("GLUT Shapes");

    glutDisplayFunc(display);
    //glutKeyboardFunc(key);
    init();
    glutMouseFunc(Mouse_hand);

    glClearColor(1,1,1,1);


    glutMainLoop();

    return 0;
}
